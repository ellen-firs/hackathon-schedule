import sqlite3
import pandas as pd
import streamlit as st
from datetime import datetime

st.set_page_config(page_title="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π", page_icon="üìÖ", layout="wide")
st.html('<head><script src="https://telegram.org/js/telegram-web-app.js"></script></head>')

# CSS —Å—Ç–∏–ª–∏ —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –∫ —Ç–µ–º–Ω–æ–º—É –∏ —Å–≤–µ—Ç–ª–æ–º—É —Ä–µ–∂–∏–º—É
st.markdown("""
    <style>
    h1 {
        color: inherit;
        text-align: center;
    }
    .stSelectbox, .stDateInput, .stButton {
        border-radius: 10px;
        padding: 5px;
    }
    @media (prefers-color-scheme: light) {
        .stSelectbox, .stDateInput, .stButton {
            background-color: rgba(240, 240, 240, 0.9);
            border: 1px solid rgba(200, 200, 200, 0.8);
        }
    }
    @media (prefers-color-scheme: dark) {
        .stSelectbox, .stDateInput, .stButton {
            background-color: rgba(50, 50, 50, 0.9);
            border: 1px solid rgba(100, 100, 100, 0.9);
        }
    }
    .stDataFrame table {
        border: 1px solid rgba(200, 200, 200, 0.5);
    }
    .stDataFrame table th {
        background-color: rgba(230, 230, 230, 0.8);
        color: inherit;
    }
    .stDataFrame table td {
        background-color: rgba(250, 250, 250, 0.8);
        color: inherit;
    }
    </style>
    """, unsafe_allow_html=True)

st.title("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π")
st.markdown('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã  –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ". –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–¥–µ–ª–∞–µ—Ç –≤–∞—à —É—á–µ–±–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É–¥–æ–±–Ω–µ–µ!')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def get_data(query, params):
    try:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect('schedule.db') as conn:
            cursor = conn.cursor()
            cursor.execute(query, params)
            columns = [description[0] for description in cursor.description]
            rows = cursor.fetchall()
        return pd.DataFrame(rows, columns=columns)
    except sqlite3.Error as e:
        st.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def get_choices(query):
    try:
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect('schedule.db') as conn:
            cursor = conn.cursor()
            cursor.execute(query)
            rows = cursor.fetchall()
        return [row[0] for row in rows]
    except sqlite3.Error as e:
        st.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def get_days_of_week():
    try:
        with sqlite3.connect('schedule.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM days_of_week ORDER BY id")
            rows = cursor.fetchall()
        return [row[0] for row in rows] if rows else []
    except sqlite3.Error as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã days_of_week: {e}")
        return []
        
def get_week_parity(date):
    start_date = datetime(2024, 9, 2)
    delta = date - start_date
    week_number = delta.days // 7
    return '–ù–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è' if week_number % 2 == 0 else '–ß–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è'

def get_day_of_week(date):
    days_of_week = get_days_of_week()
    return days_of_week[date.weekday()]

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
groups = get_choices("SELECT name FROM groups")
teachers = get_choices("SELECT name FROM teachers")
disciplines = get_choices("SELECT name FROM disciplines")
audiences = get_choices("SELECT DISTINCT room FROM schedule")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–±–ª–∏—Ü—É schedule –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–π
types_of_classes = ['–õ–µ–∫—Ü–∏—è', '–ü—Ä–∞–∫—Ç–∏–∫–∞','–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è']

# –°–µ–ª–µ–∫—Ç–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
selected_date = st.sidebar.date_input("–î–∞—Ç–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)", value=None)
selected_group = st.sidebar.selectbox("–ì—Ä—É–ø–ø–∞", [""] + groups)
selected_teacher = st.sidebar.selectbox("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", [""] + teachers)
selected_discipline = st.sidebar.selectbox("–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞", [""] + disciplines)
selected_audience = st.sidebar.selectbox("–ê—É–¥–∏—Ç–æ—Ä–∏—è", [""] + audiences)
selected_type = st.sidebar.selectbox("–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è", [""] + types_of_classes)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞
day_of_week = None
if selected_date:
    selected_date = datetime.strptime(str(selected_date), '%Y-%m-%d')
    day_of_week = get_day_of_week(selected_date)
    week_parity = get_week_parity(selected_date)
    st.write(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {selected_date.date()}, {day_of_week}")

if st.sidebar.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"):
    query = """
        SELECT 
            disciplines.name AS "–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞",
            teachers.name AS "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å",
            schedule.time AS "–í—Ä–µ–º—è",
            days_of_week.name AS "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
            schedule.room AS "–ê—É–¥–∏—Ç–æ—Ä–∏—è",
            groups.name AS "–ì—Ä—É–ø–ø–∞",
            schedule.lesson_type AS "–¢–∏–ø –∑–∞–Ω—è—Ç–∏—è",
            schedule.week AS "–¢–∏–ø –Ω–µ–¥–µ–ª–∏"
        FROM schedule
        JOIN disciplines ON schedule.discipline_id = disciplines.id
        JOIN teachers ON schedule.teacher_id = teachers.id
        JOIN days_of_week ON schedule.day_id = days_of_week.id
        JOIN groups ON schedule.group_id = groups.id
        WHERE 1=1
    """
    params = []
    if selected_group:
        query += " AND groups.name = ?"
        params.append(selected_group)
    if selected_teacher:
        query += " AND teachers.name = ?"
        params.append(selected_teacher)
    if selected_discipline:
        query += " AND disciplines.name = ?"
        params.append(selected_discipline)
    if selected_audience:
        query += " AND schedule.room = ?"
        params.append(selected_audience)
    if day_of_week:
        query += " AND days_of_week.name = ?"
        params.append(day_of_week)
    if selected_type:
        query += " AND schedule.lesson_type = ?"
        params.append(selected_type)
    if selected_type:
        query += " AND schedule.week = ?"
        params.append(selected_type)
    
    schedule = get_data(query, params)
    if schedule.empty:
        st.warning("–ü–æ –≤–∞—à–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        st.dataframe(schedule)
